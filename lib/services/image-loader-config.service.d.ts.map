{"version":3,"file":"image-loader-config.service.d.ts","sources":["image-loader-config.service.d.ts"],"names":[],"mappingssourcesContent":["import { HttpHeaders } from '@angular/common/http';\nexport declare class ImageLoaderConfigService {\n    debugMode: boolean;\n    spinnerEnabled: boolean;\n    fallbackAsPlaceholder: boolean;\n    backgroundSize: string;\n    backgroundRepeat: string;\n    display: string;\n    width: string;\n    height: string;\n    useImg: boolean;\n    fallbackUrl: any;\n    concurrency: number;\n    maxCacheSize: number;\n    maxCacheAge: number;\n    imageReturnType: 'base64' | 'uri';\n    spinnerName: any;\n    spinnerColor: any;\n    httpHeaders: HttpHeaders;\n    fileNameCachedWithExtension: boolean;\n    fallbackFileNameCachedExtension: string;\n    cacheDirectoryType: 'cache' | 'data' | 'external';\n    private _cacheDirectoryName;\n    cacheDirectoryName: string;\n    /**\n     * Enables debug mode to receive console logs, errors, warnings\n     */\n    enableDebugMode(): void;\n    /**\n     * Enable/Disable the spinner by default. Defaults to true.\n     * @param enable set to true to enable\n     */\n    enableSpinner(enable: boolean): void;\n    /**\n     * Enable/Disable the fallback image as placeholder instead of the spinner. Defaults to false.\n     * @param enable set to true to enable\n     */\n    enableFallbackAsPlaceholder(enable: boolean): void;\n    /**\n     * Sets the cache directory name. Defaults to 'image-loader-cache'\n     * @param name name of directory\n     */\n    setCacheDirectoryName(name: string): void;\n    /**\n     * Set default height for images that are not using <img> tag\n     * @param height height\n     */\n    setHeight(height: string): void;\n    /**\n     * Set default width for images that are not using <img> tag\n     * @param width Width\n     */\n    setWidth(width: string): void;\n    /**\n     * Enable display mode for images that are not using <img> tag\n     * @param display Display mode\n     */\n    setDisplay(display: string): void;\n    /**\n     * Use <img> tag by default\n     * @param use set to true to use <img> tag by default\n     */\n    useImageTag(use: boolean): void;\n    /**\n     * Set default background size for images that are not using <img> tag\n     * @param backgroundSize Background size\n     */\n    setBackgroundSize(backgroundSize: string): void;\n    /**\n     * Set background repeat for images that are not using <img> tag\n     * @param backgroundRepeat Background repeat\n     */\n    setBackgroundRepeat(backgroundRepeat: string): void;\n    /**\n     * Set fallback URL to use when image src is undefined or did not resolve.\n     * This image will not be cached. This should ideally be a locally saved image.\n     * @param fallbackUrl The remote or local URL of the image\n     */\n    setFallbackUrl(fallbackUrl: string): void;\n    /**\n     * Set the maximum number of allowed connections at the same time.\n     * @param concurrency\n     */\n    setConcurrency(concurrency: number): void;\n    /**\n     * Sets the maximum allowed cache size\n     * @param cacheSize Cache size in bytes\n     */\n    setMaximumCacheSize(cacheSize: number): void;\n    /**\n     * Sets the maximum allowed cache age\n     * @param cacheAge Maximum cache age in milliseconds\n     */\n    setMaximumCacheAge(cacheAge: number): void;\n    /**\n     * Set the return type of cached images\n     * @param imageReturnType The return type; either 'base64' or 'uri'\n     */\n    setImageReturnType(imageReturnType: 'base64' | 'uri'): void;\n    /**\n     * Set the default spinner name\n     * @param name\n     */\n    setSpinnerName(name: string): void;\n    /**\n     * Set the default spinner color\n     * @param color\n     */\n    setSpinnerColor(color: string): void;\n    /**\n     * Set headers options for the HttpClient transfers.\n     * @param headers\n     */\n    setHttpHeaders(headers: HttpHeaders): void;\n    /**\n     * Set options for the FileTransfer plugin\n     * @param options\n     * @deprecated FileTransfer plugin removed.\n     */\n    setFileTransferOptions(options: {\n        trustAllHosts: boolean;\n        [key: string]: any;\n    }): void;\n    /**\n     * Enable/Disable the save filename of cached images with extension.  Defaults to false.\n     * @param enable set to true to enable\n     */\n    setFileNameCachedWithExtension(enable: boolean): void;\n    /**\n     * Set fallback extension filename of cached images.  Defaults to '.jpg'.\n     * @param extension fallback extension (e.x .jpg)\n     */\n    setFallbackFileNameCachedExtension(extension: string): void;\n}\n"]}